var goobiWorkflowJS = ( function() {
    'use strict';
    
    var _debug = false;
    var _defaults = {
		metseditor: {
			thumbnails: {
				maxParallelRequests: 100
			}
		}
	};
    
    var goobiWorkflow = {};
    
    goobiWorkflow.init = function( config ) {
        if ( _debug ) {
            console.log( 'Initializing: goobiWorkflowJS.init' );
            console.log( '--> config = ', config );
        }
        
        $.extend( true, _defaults, config );

        // throw some console infos
        console.info( 'Current View: ', _defaults.currentView );

        // init BS features --> needs ajax reload
        goobiWorkflowJS.initBootstrapFeatures();

        // init layout --> needs ajax reload
        goobiWorkflowJS.layout.init(_defaults);

        // init menu
        goobiWorkflowJS.menu.init();
        
        // init module box --> needs partial ajax reload
        goobiWorkflowJS.box.init();
        
        // init buttons --> needs ajax reload
        goobiWorkflowJS.buttons.init(_defaults);
        
        // init tinyMCE if needed
        goobiWorkflowJS.tinymce.init(_defaults);
        
        // init object view --> needs ajax reload
        goobiWorkflowJS.object.init();
        
        // init bookmarks --> needs ajax reload
        goobiWorkflowJS.bookmarks.init();

        // init jump to page
        goobiWorkflowJS.jumpToPage.init();

        // init scroll positions
        goobiWorkflowJS.scrollPositions.init();

        // init progressbar
        // goobiWorkflowJS..init();
        
        // init shortcuts for navigation
        goobiWorkflowJS.navigation.init(_defaults);
        
        // init buttons --> needs ajax reload
        goobiWorkflowJS.buttons.init(_defaults);
        
        // execute autosave interval
        if (_defaults.readOnlyMode === 'false') {
            goobiWorkflowJS.autoSave(_defaults.autoSaveInterval);
        }

        // init structdata module
        goobiWorkflowJS.structdata.init();
        
        // init modals
        goobiWorkflowJS.modals.init();
        
        // init thumbnails --> needs ajax reload
        goobiWorkflowJS.thumbnails.init(_defaults.metseditor.thumbnails);
        
        // init jsf ajax listener
        goobiWorkflowJS.jsfAjax.init( _defaults );
        
        $(".focusable").attr("tabindex", "0");
    	$(".focusableChild input").attr("tabindex", "0")	//tabindex 0 not working??
    	$(".notFocusable").attr("tabindex", "-1");
    	$(".notFocusableChild").children().attr("tabindex","-1");

    }
    
    /**
     * @description Method to initialize Bootstrap features.
     * @method initBootstrapFeatures
     */
    goobiWorkflow.initBootstrapFeatures = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.initBootstrapFeatures');
        }
        
        $( '[data-toggle="tooltip"]' ).tooltip( {
            trigger: 'hover focus'
        } );
        $( '[data-toggle-second="tooltip"]' ).tooltip();
        $( '[data-toggle="popover"]' ).popover({
            html: true
        });
    }

    /**
     * @description Method to clean up Bootstrap features.
     * @method cleanUpBootstrapFeatures
     */
    goobiWorkflow.cleanUpBootstrapFeatures = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.cleanUpBootstrapFeatures');
        }

        if ( $( '.popover' ).length > 0 ) {
            $( '.popover' ).remove();
        }
        else if ( $( '.tooltip' ).length > 0 ) {
            $( '.tooltip' ).remove();
        }
    }

    /**
     * @description Method to print parts of the page.
     * @method printPage
     */
    goobiWorkflow.printPage = function () {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.printPage');
        }

        var printReport = document.getElementById( 'left' ).innerHTML;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '#{HelperForm.servletPathWithHostAsUrl}/uii/template/css/intranda.css?version=1';

        var win = window.open("", "", "");
        var head = win.document.getElementsByTagName('head')[0];
        head.appendChild(link);
        win.document.body.innerHTML = printReport;

        win.window.print();
        win.close();
    }

    /**
     * @description Method to click the submit button on primefaces autocomplete.
     * @method submitEnter
     * @param {String} id The ID of the submit button.
     * @param {Event} e A JavaScript event which holds the key events.
     * */
    goobiWorkflow.submitEnter = function( id, e ) {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.submitEnter');
        }

        var keycode;

        if ( window.event ) {
            keycode = window.event.keyCode;
        }
        else if ( e ) {
            keycode = e.which;
        }
        else {
            return true;
        }
        if ( keycode == 13 ) {
            document.getElementById( id ).click();

            return false;
        }
        else {
            return true;
        }
    }

    /**
     * @description Method to set on click handler to primefaces autocomplete items.
     * @method setAutocompleteListHandler
     * */
    goobiWorkflow.setAutocompleteListHandler = function(id, e) {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.setAutocompleteListHandler');
        }
        if (!goobiWorkflow.submitEnter(id, e)) {
            return false;
        }
        
        setTimeout( function () {
            if ( $('.ui-autocomplete-panel li' ).length > 0 ) {
                $( '.ui-autocomplete-panel li' ).on( 'click', function () {
                    if (document.getElementById('goButton') != null) {
                        document.getElementById( 'goButton' ).click();
                    } else {
                        document.getElementById( 'goButtonThumbs' ).click();                        
                    }
                });
            }
        }, 1000 );
    }
    
    /**
     * @description Method to set on click handler to primefaces autocomplete items.
     * @method displayProgressBar
     * */
    goobiWorkflow.displayProgressBar = function() {
        if ( _debug ) {
            console.log('EXECUTE: goobiWorkflowJS.displayProgressBar');
        }
        
        var element = document.getElementById( 'progressPanel' );

        if ( element.style.display == 'block' ) {
            element.style.display = 'none';
        } 
        else {
            element.style.display = 'block';
        }

        document.getElementById( 'progressbutton' ).click();
    }
    
    /**
     * @description Method to trigger autosave.
     * @method autoSave
     * @param {Number} interval The interval when autosave starts.
     * */
    goobiWorkflow.autoSave = function(interval) {            
        var intervalValue = parseInt(interval);
        
        if (intervalValue > 0) {
            setInterval( function() {
                var myButton = document.getElementById("meMenuActionsForm:automaticSave");
                if (myButton!=null) {
                    myButton.click();
                }
            }, intervalValue * 1000 * 60);
        }
    };
    
    /**
     * @description Method to trigger a button on enter.
     * @method fireOnEnter
     * @param {String} object The object selector to trigger enter.
     * @param {String} selector The selector of the button to click.
     * */
    goobiWorkflow.fireOnEnter = function (object, selector) {
        if (_debug) {
            console.log('EXECUTE: goobiWorkflowJS.fireOnEnter');
            console.log('--> object = ', object);
            console.log('--> selector = ', selector);
        }

        $('#' + object).on('keyup', function (event) {
            event.preventDefault();

            if (event.keyCode == 13) {
                $('#' + selector).click();
            }
        });
    };
    
    
            
	  goobiWorkflow.loadPlugin = function (data, selector) {
		if (data.status === 'success') {
			console.log(selector );
			$(selector).modal('show');
		}
	};

    return goobiWorkflow;
    
} )( jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.bookmarks = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.bookmarks.init' );
            }

            // set dynamic to position of bookmarks
//            _setTopPosition();
            // set resize event
//            window.addEventListener( 'resize', _setTopPosition );
//            window.addEventListener( 'orientationchange', _setTopPosition );

            // load jquery plugin "colorbox"
            this.loadColorbox();
        },
        /**
         * @description Method to load a colorbox for bookmarks.
         * @method loadColorbox
         */
        loadColorbox: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflowJS.bookmarks.loadColorbox' );
            }

            // reset all colorboxes
            $.colorbox.remove();
            
            // set colorboxes
            $( '.colorbox-image' ).colorbox( {
                transition: 'fade',
                rel: 'colorbox-image',
                maxWidth: '90%',
                maxHeight: '90%',
            } );
        }
    };

    /**
     * @description Method to set the top position of the bookmarks.
     * @method _setTopPosition
     */
    function _setTopPosition() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setTopPosition' );
        }
        
        var controlWrapperHeight = $( '#objectControlWrapper' ).outerHeight();

        $( '#bookmarks' ).css( 'top', controlWrapperHeight + 90 );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _status = {};

    goobiWorkflow.box = {
        /**
         * @description Method to initialize the box module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.box.init' );
            }

            // write box status to session storage
            if ( sessionStorage.getItem( 'wf_boxStatus' ) == null ) {
                sessionStorage.setItem( 'wf_boxStatus', JSON.stringify( _status ) );
            }

            // execute box methods
            this.getBoxStatus();
            _setBoxStatus();
            _setToggleBoxBodyEvent();
        },
        /**
         * @description Method to get the status of the boxes.
         * @method getBoxStatus
         */
        getBoxStatus: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflowJS.box.getBoxStatus' );
            }
            
            var status = JSON.parse( sessionStorage.getItem( 'wf_boxStatus' ) );
            
            if ( status != null ) {
                $.each( status, function( element, status ) {
                    if ( !status ) {
                        $( '#' + element ).find( '[data-toggle="box-body"]' ).addClass( 'closed' );
                        $( '#' + element ).find( '.module__box-body' ).hide();
                    } else {
                        $( '#' + element ).find( '[data-toggle="box-body"]' ).removeClass( 'closed' );
                        $( '#' + element ).find( '.module__box-body' ).show();
                    }
                    
                } );
            }
        }
    };

    /**
     * @description Method to set the status of the boxes.
     * @method _setBoxStatus
     */
    function _setBoxStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setBoxStatus' );
        }

        var status = JSON.parse( sessionStorage.getItem( 'wf_boxStatus' ) );

        $( '.module__box--collapsable' ).each( function() {
            var currId = $( this ).attr( 'id' );
            var isClosed = $( this ).find( '[data-toggle="box-body"]' ).hasClass( 'closed' );

            if ( isClosed ) {
                status[ currId ] = false;
            }
            else {
                status[ currId ] = true;
            }
        } );

        sessionStorage.setItem( 'wf_boxStatus', JSON.stringify( status ) );
    }

    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setToggleBoxBodyEvent
     */
    function _setToggleBoxBodyEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setToggleBoxBodyEvent' );
        }

        $( 'body' ).on( 'click', '.module__box--collapsable .module__box-title h1', function () {
            $( this ).find( '[data-toggle="box-body"]' ).toggleClass( 'closed' );
            $( this ).parents( '.module__box-title' ).next().slideToggle( 200, function() {
                _setBoxStatus();
            } );
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = (function (goobiWorkflow) {
    'use strict';

    var _debug = false;
    var _defaults = {};

    goobiWorkflow.buttons = {
        /**
         * @description Method to initialize the buttons.
         * @method init
         */
        init: function (config) {
            if (_debug) {
                console.log('Initializing: goobiWorkflowJS.buttons.init');
            }
            
            $.extend( true, _defaults, config );
            
            if ($('.btn').hasClass('btn--toggle')) {
                _setButtonToggleEvent();
            }
        }
    };

    /**
     * @description Method to set the event listener to button toggle.
     * @method _setButtonToggleEvent
     */
    function _setButtonToggleEvent() {
        if (_debug) {
            console.log('EXECUTE: _setButtonToggleEvent');
        }

        $('.btn--toggle').off().on('click', function () {
            $(this).next('div').slideToggle(300);
        });
    }

   

                
    return goobiWorkflow;

})(goobiWorkflowJS || {}, jQuery);
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.jsfAjax = {
        /**
         * @description Method to initialize the jsf ajax listener.
         * @method init
         */
        begin: new rxjs.Subject(),
        complete: new rxjs.Subject(),
        success: new rxjs.Subject(),
    	init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.jsfAjax.init' );
                console.log( '--> config = ', config );
            }

            $.extend( true, _defaults, config );

            // listen to jsf ajax event
            if (typeof jsf !== 'undefined') {
                jsf.ajax.addOnEvent(function (data) {
                    if (_debug) {
                        console.log('JSF AJAX - data: ', data);
                    }
                    var ajaxloader = document.getElementById("ajaxloader");
                    switch (data.status) {
                        case 'begin':
                        	goobiWorkflow.jsfAjax.begin.next(data);
                            // show button ajax loader
                            if ($('.btn').hasClass('btn--loader')) {
                                $('.btn-ajax-loader').addClass('in');
                            }
                            ajaxloader.style.display = 'block';
                            if (data?.source?.dataset.renderimage=='true'){
                                // clean up object resources
                                goobiWorkflowJS.object.freeJSResources();
                            }
                            goobiWorkflow.tinymce.renderInputFields(data);
                            break;
                        case 'complete':
                        	goobiWorkflow.jsfAjax.complete.next(data);
                            ajaxloader.style.display = 'none';
                            break;
                        case 'success':
                        	goobiWorkflow.jsfAjax.success.next(data);
                            if ( _debug ){
                                console.log("handling jsf ajax success");
                            }
                            // hide button ajax loader
                            if ($('.btn').hasClass('btn--loader')) {
                                $('.btn-ajax-loader').removeClass('in');
                            }
                            // init BS features
                            goobiWorkflowJS.cleanUpBootstrapFeatures();
                            goobiWorkflowJS.initBootstrapFeatures();
                            // init layout
                            goobiWorkflowJS.layout.init();
                            if (data?.source?.dataset.renderimage=='true'){
                                // init object view
                                goobiWorkflowJS.object.imageLoadHandler();
                                // init thumbnails
                                goobiWorkflowJS.thumbnails.init();
                            }
                            // reload alto-editor
                            if(data?.source?.id != "saveAltoChanges" && data?.source?.id != "altoEditorAutocompleteScript") {
                            	//console.log(data.source);
	                            var altoEditorElement = document.querySelector('alto-editor')
	                            if(altoEditorElement && altoEditorElement._tag) {
	                            	altoEditorElement._tag.unmount(true)
	                            	if(typeof riot !== "undefined") {
	                            		openAltoEditor(true);
	                            	}
	                            }
                            }
                            // re-mount other riot components
                            if(window.riot_mounts && typeof riot !== "undefined") {
                            	for(let key of Object.keys(window.riot_mounts)) {
                            		if(document.querySelector(key)) {
                            			if(!document.querySelector(key)._tag) {
	                            			riot.mount(key, riot_mounts[key]())
                            			} else {
                            				let opts = riot_mounts[key]()
                            				riot.update(key, opts)
                            			}
                        			}
                            	}
                            }
                            // fade out messages
                            setTimeout(function() {
                            	$('*[data-fadeoutmessages="true"] li').fadeOut(1000);
                        	}, 1500);
                            // get box status
                            goobiWorkflowJS.box.getBoxStatus();
                            // init buttons
                            goobiWorkflowJS.buttons.init();
                            // init bookmarks
                            goobiWorkflowJS.bookmarks.init();
                            
                            // init tinyMCE if needed
                            goobiWorkflowJS.tinymce.init(_defaults);
                            
                            goobiWorkflowJS.setAutocompleteListHandler();
                            
                            goobiWorkflowJS.layout.setImageCommentHeight();
                            break;
                    }
                });
            }
        }
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '#navigationActions'
    };
    
    goobiWorkflow.jumpToPage = {
        /**
         * @description Toggle between current page info and an input field in the METS editor. The input field is activated on click.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.jumpToPage.init' );
            }
            
            
            $( 'body' ).on( 'click', '#currentPage, #currentPagePrefix', function() {
				var curPagePre = $('#currentPagePrefix');

				// Make input span at the same size as #curPagePrefix
				// this prevents layout shifts
				var currentPageWidth =  curPagePre[0].getBoundingClientRect().width;
				var currentPageHeight =  curPagePre[0].getBoundingClientRect().height;
                curPagePre.next().css('width', currentPageWidth);
                curPagePre.next().css('height', currentPageHeight);
                
                // Show span containing an input field
                curPagePre.hide();
                curPagePre.next().css( "display", "inline-block" )

                $('#jumpToImageAutocomplete input').focus();
            } );
            
            $( 'body' ).on( 'blur', '#jumpToImageAutocomplete input', function() {
                $( '#jumpToImageAutocomplete' ).hide();
                $(  '#currentPagePrefix'  ).show();
            } );    
            
            $( 'body' ).on( 'click', '#jumpToPage', function() {
                $( this ).hide();
                $( this ).next().css( "display", "inherit" )
                $('#jumpToThumbAutocomplete input').focus();
            } );
            
            $( 'body' ).on( 'blur', '#jumpToThumbAutocomplete input', function() {
                $( '#jumpToThumbAutocomplete' ).hide();
                $(  '#jumpToPage'  ).show();
            } );    
            
            
        }
    };

    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _columns = {
        left: 0,
        center: 0,
        right: 0,
        handles: {
            left: 0,
            right: 0
        }
    }
    var _defaults = {};
    
    goobiWorkflow.layout = {
        /**
         * @description Method to initialize the layout module.
         * @method init
        */
    	init: function(config) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.layout.init' );
            }
            $.extend( true, _defaults, config );

            if ( window.matchMedia( '(min-width: 993px)' ).matches ) {
                // set resize event
                window.addEventListener( 'resize', _setResizeEvents );
                window.addEventListener( 'orientationchange', _setResizeEvents );

                // set resizable elements
                _setResizableElements();

                // get saved widths from session storage
                _getSavedWidths();
            }

            // set top margin for thumbnails
            _setThumbnailsMargin();
            // show content wrapper
            $( '#pageContentWrapper' ).show();
//            setTimeout(function() {
//            }, 500);
            // set flexible row columns            
            _setFlexibleRowColumns();
            // set initial position of toc actions
            $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
            
            //set tabIndex
            _setTabindex();
            
            //set image comments height
            this.setImageCommentHeight();
        },
        /**
         * @description Method to set the correct height of the object view column.
         * @method setObjectViewHeight
         */
        setObjectViewHeight: function() {
            if ( _debug ) {
                console.log( 'EXECUTE: goobiWorkflowJS.layout.setObjectViewHeight' );
            }
                        
            var pageContentRightHeight = $( '#pageContentRight' ).outerHeight();
            var controlWrapperHeight = $( '#imageNavigation' ).outerHeight();
            var imageCommentHeight = $( '#imageCommentArea' ).outerHeight();
            if (!imageCommentHeight){
            	imageCommentHeight = 0;
            }
            
            $( '#mainImage' ).css( 'height', pageContentRightHeight - controlWrapperHeight - imageCommentHeight - 45 );
        },
	    /**
	     * @description Method to set initial image comment height
	     * @method setImageCommentHeight
	     */
	    setImageCommentHeight: function() {
			var commentArea = document.querySelector("#Comment");
			if(commentArea) {
				function setHeight() {
					var lines = Math.max(1, commentArea.value.split("\n").length);
					commentArea.style.height = (lines * 17 + 13) + "px";
				}
				setHeight();
	  			//also add event listener on input
	  			commentArea.addEventListener("input", setHeight);
			}
		}
    };
    
    
    /**
     * @description Method to add Tabindex to elements.
     * @method _setTabindex
     */
    function _setTabindex(){
    	if ( _debug ) {
    		console.log( ' EXECUTE: _setTabindex' );
    	}
    	$(".focusableChildCss input").addClass("focusable");
    	$(".focusable").attr("tabindex", "0");
     	$(".focusableChild input").attr("tabindex", "0");	//tabindex 0 not working??
     	$(".notFocusable").attr("tabindex", "-1");
     	$(".notFocusableChild").children().attr("tabindex","-1");
    }
    
    /**
     * @description Method to set the resizable elements.
     * @method _setResizableElements
     */
    function _setResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizableElements' );
        }

        // set left column resizable
        $( '#pageContentLeft' ).resizable({
            handles: 'e',
            minWidth: 200,
            maxWidth: $(window).width() * 0.45,
            resize: function( event, ui ) {
            if (_defaults.displayImageArea) {                       
                        $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() -1);
                        $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
                        $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
            } else {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
                $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
            }
                goobiWorkflowJS.layout.setObjectViewHeight();
                _setFlexibleRowColumns();
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
       // if (_defaults.displayImageArea) {
            // set right column resizable
        $( '#pageContentRight' ).resizable({
            handles: 'w',
            minWidth: 400,
            maxWidth: $(window).width() / 2,
            resize: function( event, ui ) {
                $( '#pageContentCenter' ).outerWidth( $( window ).outerWidth() - $( '#pageContentRight' ).outerWidth() - $( '#pageContentLeft' ).outerWidth() -1);
                $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
                
                goobiWorkflowJS.layout.setObjectViewHeight();
                _setFlexibleRowColumns();
                _setColumnWidth();
            }
        }).on( 'resize', function( event ) {
            event.stopPropagation();
        } );
        
        $( '#pageContentLeft .ui-resizable-handle' ).attr('tabindex', '-1');
        $( '#pageContentRight .ui-resizable-handle' ).attr('tabindex', '-1');
    }
    
    /**
     * @description Method to reset the resizable elements.
     * @method _resetResizableElements
     */
    function _resetResizableElements() {
        if ( _debug ) {
            console.log( 'EXECUTE: _resetResizableElements' );
        }

        $( '#pageContentLeft' ).css( 'width', '20%' );
        if (_defaults.displayImageArea) {

        $( '#pageContentCenter, #pageContentRight' ).css( 'width', '40%' );
        } else {
            $( '#pageContentCenter').css( 'width', '80%' );
        }
        $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', $( '#pageContentLeft' ).outerWidth() );
        $( '#pageContentLeft .ui-resizable-handle' ).attr('tabindex', '-1');
        $( '#pageContentRight .ui-resizable-handle' ).css( 'right', $( '#pageContentRight' ).outerWidth() - 7 );
        $( '#pageContentRight .ui-resizable-handle' ).attr('tabindex', '-1');
        $( '#structureActions' ).css( 'left', $( '#pageContentLeft' ).width() - 45 );
        _setColumnWidth();
        _getSavedWidths();
    }

    /**
     * @description Method to set the column widths from session storage.
     * @method _setColumnWidth
     */
    function _setColumnWidth() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setColumnWidth' );
        }
            
        _columns.left = $( '#pageContentLeft' ).outerWidth();
        _columns.center = $( '#pageContentCenter' ).outerWidth();
        _columns.right = $( '#pageContentRight' ).outerWidth();
        _columns.handles.left = parseInt( $( '#pageContentLeft .ui-resizable-handle' ).css( 'left' ) );
        _columns.handles.right = parseInt( $( '#pageContentRight .ui-resizable-handle' ).css( 'right' ) );

        sessionStorage.setItem( 'wf_columnWidths', JSON.stringify( _columns ) );
    }
    
    /**
     * @description Method to set the window rezise event.
     * @method _setResizeEvents
     */
    function _setResizeEvents() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setResizeEvents' );
        }

        _resetResizableElements();
        goobiWorkflowJS.layout.setObjectViewHeight();
        _setFlexibleRowColumns();
    }
    
    /**
     * @description Method to get the saved widths from session storage.
     * @method _getSavedWidths
     */
    function _getSavedWidths() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getSavedWidths');
        }
        if ( sessionStorage.getItem( 'wf_columnWidths' ) != undefined ) {
            _columns = JSON.parse( sessionStorage.getItem( 'wf_columnWidths' ) );
            if (_defaults.displayImageArea) {
                if ($( window ).outerWidth() < _columns.left +  _columns.center + _columns.right || _columns.right == null) {
                    $( '#pageContentLeft' ).outerWidth(Math.floor(_columns.left) );
                    $( '#pageContentCenter' ).outerWidth(Math.floor(($(window).width() -  $( '#pageContentLeft' ).outerWidth())/2 ));
                    $( '#pageContentRight' ).outerWidth( (Math.floor($(window).width() -  $( '#pageContentLeft' ).outerWidth() ) /2));
                } else {
                    $( '#pageContentLeft' ).outerWidth(Math.floor( _columns.left ));
                    $( '#pageContentCenter' ).outerWidth(Math.floor( _columns.center ));
                    $( '#pageContentRight' ).outerWidth(Math.floor( _columns.right ) -1);
                }
                $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', _columns.handles.left );
                $( '#pageContentRight .ui-resizable-handle' ).css( 'right', _columns.handles.right );                
            } else {
                $( '#pageContentLeft' ).outerWidth( _columns.left );
                $( '#pageContentCenter' ).outerWidth($(window).width() -  $( '#pageContentLeft' ).outerWidth() );
                $( '#pageContentLeft .ui-resizable-handle' ).css( 'left', _columns.handles.left );
            }
        }
    }
    
    /**
     * @description Method to set top margin of the thumbnail wrapper.
     * @method _setThumbnailsMargin
     */
    function _setThumbnailsMargin() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setThumbnailsMargin' );
        }
            
//        var thumbnailsNavigationHeight = $( '#thumbnailsNavigation' ).height();
//        
//        if (window.matchMedia('(min-width: 993px)').matches) {
//            $( '#thumbnails' ).css( 'margin-top', thumbnailsNavigationHeight + 10 );
//        }
//        else {
//            $( '#thumbnails' ).css( 'margin-top', 66 );
//        }
    }
    
    /**
     * @description Method to set the flexible row column width.
     * @method _setFlexibleRowColumns
     */
    function _setFlexibleRowColumns() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setFlexibleRowColumns' );
        }
        if ($( '.row-flexible' ).width() > 0 && $( '.row-flexible' ).width() < 550 ) {
            
            $( '.row-flexible' ).addClass( 'fullwidth' );
        }
        else {
            $( '.row-flexible' ).removeClass( 'fullwidth' );
        }
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        navigationSelector: '#navigation',
        navigationActionSelector: '.navigationActions'
    };
    
    goobiWorkflow.menu = {
        /**
         * @description Method to initialize the menu module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.menu.init' );
            }

            _setSubmenuToggleEvent();

            // toggle mobile navigation
            $('body').on('click', '[data-toggle="mobile-menu"]', function () {
                $('#navigation').slideToggle(200);
            });
            // toggle mobile image
            $('body').on('click', '[data-toggle="mobile-image"]', function () {
                $(this).toggleClass('in');
                $('#pageContentRight').toggleClass('in');
            });
        }
    };
    
    /**
     * @description Method to set the event listener to toggle box body.
     * @method _setSubmenuToggleEvent
     */
    function _setSubmenuToggleEvent() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setSubmenuToggleEvent' );
        }

        $( 'body' ).on( 'click', '[data-show="submenu"]', function ( event ) {
            if ( $( this ).next().is( ':visible' ) ) {
                $( '.submenu' ).hide();
                $( this ).next().hide();
            }
            else {
                $( '.submenu' ).hide();
                $( this ).next().show();
            }
        } );

        // reset all menus by clicking on body
        $( 'body' ).on( 'click', function( event ) {
            if ( 
                event.target.id == 'navigation' || 
                $( event.target ).closest( _defaults.navigationSelector ).length || 
                event.target.id == 'navigationActions' || 
                $( event.target ).closest( _defaults.navigationActionSelector ).length 
            ) {
                return;
            }
            else {
                $( '.submenu' ).hide();
            }
        } );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    
    goobiWorkflow.meScrollPos = {
        /**
         * Initialize this module: Update the current view, 
         * save and restore scroll positions.
         * @param {Object} data -- jsf data obj, available in `<f:ajax>`
         * @param {Object.<string>} [opts] -- options to be passed
         */
      init: function(data, {view = goobiWorkflowConfig.currentView, saveScrollPos = true} = {}) {
        if ( _debug ) console.log( 'Init: goobiWorkflowJS.meScrollPos.init' );
        if ( _debug ) console.log( 'view:', view,'|||', 'saveScrollPos:', saveScrollPos);

        // Set goobiWorkflowConfig.currentView
        this.updateView(data, view)
        // Save and restore scroll position
        this.restoreScrollPosCenter(data, saveScrollPos)
      },

      /**
       * Update state => set goobiWorkflowConfig.currentView.
       * This is done, because this variable is not updated in AJAX calls.
         * @param {Object} data -- jsf data obj, available in `<f:ajax>`
         * @param {String} [view] -- name of the current view
       */
      updateView: function(data, view) {
        if(data.status === 'success') {
          if(_debug) console.log({view})
          goobiWorkflowConfig.currentView = view;
        }
      },


      /** Map view names to keys used in session storage
       * @param {string} view -- name of a view
       * @returns {string} key to access the scroll position of a view
       */
      getScrollPosKey: function(view) {
        const keys = {
          'Paginierung': 'mePagination',
          'Strukturdaten': 'meStructData',
          'Metadaten': 'meMetadata',
          'File': 'meFile',
          'default': 'default',
        }
        return keys[view] || keys['default'];
      },

      /** Calculate the height of error messages 
       * displayed at the top of the message editors center column.
       * When rerendering a view the number of message (and thus their height) may change.
       * Accounting for these changes, keeps the scroll position at the same level.
       * @returns {number} messageHeight -- height of the aggregated error messages
       */
      getErrorMsgHeight: function() {
        // Get height and margin of error messages at the top of the center col
        const messages = document.querySelector('#messages');
        const messagesStyles = getComputedStyle(messages);
        let messageHeight = messages.offsetHeight;
        messageHeight += parseInt(messagesStyles.marginTop)
        messageHeight += parseInt(messagesStyles.marginBottom)
        return messageHeight;
      },

      /** Store and restore the scroll position of a view. 
       * This function is used in ajax calls.
       * @param {Object} data -- jsf data object, available in `<f:ajax>`
       * @param {boolean} saveScrollPos -- determines if the current scroll position is stored in session storage
       */
      restoreScrollPosCenter: function(data, saveScrollPos) {
        if(_debug) console.log({saveScrollPos})

        // Save scroll position
        if(saveScrollPos) {
          // Ajax call starts
          if (data.status === 'begin') {
            this.storeScrollPos();
          }
        }

        // Ajax call is done
        if (data.status === 'success') {
          this.restoreScrollPos()
        }
      },

    /** Get the current scroll position, and store it in session storage */
    storeScrollPos: function() {
        if(_debug) console.log('RESTORE SCROLL POS')

        const contentLeft = document.querySelector('#pageContentLeft');
        const contentCenter = document.querySelector('#pageContentCenter');
        const view = goobiWorkflowConfig.currentView;
        const key =  this.getScrollPosKey(view);

        // Restore previous scroll positions of all views
        const restoredScrollPosAll = sessionStorage.getItem('gw_me_scrollPos');

        // Current view: get scroll position of the center div
        const centerScrollPos = contentCenter.scrollTop; // absolute position
        const curScrollPos = centerScrollPos - this.getErrorMsgHeight();

        let scrollPosAll = {};
        if(restoredScrollPosAll) {
          scrollPosAll = JSON.parse(restoredScrollPosAll);
        }
        // Assign a default scroll position
        scrollPosAll.default = '0';

        // Init or update current scroll position of the left column
        scrollPosAll.meLeft = contentLeft.scrollTop;

        // Init or update current scroll position of the center column
        scrollPosAll[key] = curScrollPos;

        // Write updated scroll positions to session storage
        sessionStorage.setItem('gw_me_scrollPos', JSON.stringify(scrollPosAll))

        // Debugging
        if(_debug) console.log({curScrollPos})
        if(_debug) console.log('%cscrollPos saved', 'background: lime; color: #fff')
        if(_debug) console.table({scrollPosAll})
      },

      /** Get previous scroll positions from session storage, and
       * calculate + restore current scroll position based on these values.
       */
      restoreScrollPos: function() {
        const contentLeft = document.querySelector('#pageContentLeft');
        const contentCenter = document.querySelector('#pageContentCenter');

        // Get scroll position from session storage
        const view = goobiWorkflowConfig.currentView;
        const key = this.getScrollPosKey(view)
        const restoredScrollPosAll = JSON.parse(sessionStorage.getItem('gw_me_scrollPos'));

        // Abort if session storage is empty
        if(!restoredScrollPosAll) return;

        const oldPos = restoredScrollPosAll[key];

        // Set box status (collapsed / open)
        goobiWorkflowJS.box.getBoxStatus();

        // Set new scroll positions
        contentLeft.scrollTop = restoredScrollPosAll.meLeft;
        contentCenter.scrollTop = oldPos + this.getErrorMsgHeight();



        // Debugging
        if (_debug) {
          console.log({oldPos})
          console.log('contentCenter.scrollTop:', contentCenter.scrollTop)
        }

      },

      /** Delete scroll positions from local storage. */
      destroyScrollPos: function() {
        sessionStorage.removeItem('gw_me_scrollPos');
      }

    }

  return goobiWorkflow;

} )( goobiWorkflowJS || {}, jQuery );

var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.modals = {
        /**
         * @description Method to initialize the modals module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.modals.init' );
            }
            
        },
    };
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.navigation = {
        /**
         * @description Method to initialize the buttons.
         * @method init
         */
        init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.navigation.init' );
            }
            
            $.extend( true, _defaults, config );
            
            _setImageNavigationButtonEvents();
        }
    };
    
    function _checkNavigationBlocked() {
    	//The objects in window.imageNavBlockers look like this:
    	//{check: function, confirm: "string"}
    	//check has to be a function. If check() returns true, a confirm dialog with the
    	//string in confirm will be shown. If the confirm dialog is dismissed,
    	//navigation with shortcut keys will be blocked
    	if(!window.imageNavBlockers) {
    		return false;
    	}
    	let blocked = false;
    	for(let blocker of window.imageNavBlockers) {
    		if(blocker.check() && !confirm(blocker.confirm)) {
    			blocked = true;
    		}
    	}
    	return blocked;
    }
    
    function _setImageNavigationButtonEvents() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setImageNavigationButtonEvents' );
        }
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+right', function(e) {
        	if(_checkNavigationBlocked()) {
        		return;
        	}
            var myButton = document.getElementById( "nextImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+left', function() {
        	if(_checkNavigationBlocked()) {
        		return;
        	}
            var myButton = document.getElementById( "prevImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+up', function() {
        	if(_checkNavigationBlocked()) {
        		return;
        	}
            var myButton = document.getElementById( "imageNext20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+down', function() {
        	if(_checkNavigationBlocked()) {
        		return;
        	}
            var myButton = document.getElementById( "imageBack20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+home', function() {
        	if(_checkNavigationBlocked()) {
        		return;
        	}
            var myButton = document.getElementById( "imageFirst" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+end', function() {
        	if(_checkNavigationBlocked()) {
        		return;
        	}
            var myButton = document.getElementById( "imageLast" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+return', function() {
            var myButton = document.getElementById( "meMenuActionsForm:saveMetsFileButtonAjax" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+v', function() {
            var myButton = document.getElementById( "meMenuActionsForm:startValidationButton" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( document ).bind( 'keyup', _defaults.navigationShortcut + '+space', function() {
            var hiddenImageNo = $( "#hiddenImageNo" ).val();
            if ( hiddenImageNo == null ) {
                hiddenImageNo = $( "#hiddenImageNoThumb" ).val();
            }
            var checkbox = document.getElementById( "pagesList:" + hiddenImageNo + ":checkbox" );
            
            if ( checkbox.checked ) {
                checkbox.checked = false;
            }
            else {
                checkbox.checked = true;
            }
            checkbox.focus();
            checkbox.blur();
            
        } )

        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+right', function() {
            var myButton = document.getElementById( "nextImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+left', function() {
            var myButton = document.getElementById( "prevImage" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+up', function() {
            var myButton = document.getElementById( "imageNext20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+down', function() {
            var myButton = document.getElementById( "imageBack20" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+home', function() {
            var myButton = document.getElementById( "imageFirst" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+end', function() {
            var myButton = document.getElementById( "imageLast" );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+return', function() {
            
            var myButton = document.getElementById( "meMenuActionsForm:saveMetsFileButtonAjax" );
            console.log( myButton );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+v', function() {
            
            var myButton = document.getElementById( "meMenuActionsForm:startValidationButton" );
            console.log( myButton );
            if ( myButton != null ) {
                myButton.click();
            }
        } );
        
        $( 'input:checkbox' ).bind( 'keyup', _defaults.navigationShortcut + '+space', function() {
            var hiddenImageNo = $( "#hiddenImageNo" ).val();
            for ( i = 0; i < document.getElementsByName( "myCheckboxes" ).length; i++ ) {
                if ( i == hiddenImageNo ) {
                    var checkbox = document.getElementsByName( "myCheckboxes" )[ i ];
                    if ( checkbox.checked ) {
                        checkbox.checked = false;
                    }
                    else {
                        checkbox.checked = true;
                    }
                }
            }
        } );
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );

var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    var _viewImage = null;
    var _world = null;
    var _mediaType = null;
    var _preloadedImages = [];
    var _colors = ['#ff4433'];
    //var _colors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000'];
    var _configViewer = {
        global: {
            divId: "mainImage",
            useTiles: true,
            footerHeight: 0,
            adaptContainerHeight: false,
            zoomSlider: ".zoom-slider",
            zoomSliderHandle: ".zoom-slider-handle",
            zoomSliderLabel: "#zoomSliderLabel input",
            persistZoom: false,
            persistRotation: false,
            persistenceId: '',
        }, 
        image: {
            mimeType: "image/jpeg",
            tileSource: '',
        }
    };
    var _drawStyle = {
            borderWidth: 2,
            borderColor: "#ff4433"
        };
    var _worldConfig = {
        controls: {
            xAxis: {
                rotateLeft: "#rotate-left-x",
                rotateRight: "#rotate-right-x"
            },
            yAxis: {
                rotateLeft: "#rotate-left-y",
                rotateRight: "#rotate-right-y"
            },
            zAxis: {
                rotateLeft: "#rotate-left-z",
                rotateRight: "#rotate-right-z"
            },
            position: {
                reset: "#reset-position"
            },
            zoom: {
                resetZoom: "#reset#zoom"
            }
        },
        container: {
            id: "mainImage"
        },
        resourcesPath: "template/js/",
    };
    
    goobiWorkflow.object = {
        /**
         * @description Method to initialize the object view.
         * @method init
         */
        init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.object.init' );
            }

            // TODO: fix image controls
            
            // init object view
            if ( $( '#mainImage' ).length > 0 ) {
                this.imageLoadHandler();

                // if ( _configViewer.global.persistZoom || _configViewer.global.persistRotation ) {
                //     $( 'body' ).on( 'click', '#imageNavigation a', function() {
                //         if ( _viewImage ) {
                //             console.log('click');
                //             _viewImage.controls.persistence.storeLocation
                //         }
                //     } );
                // }
            }
        },
        initControls() {
            $('#rotate-right-x').on("click", function() {
                _viewImage.controls.rotateRight();
            })
            $('#rotate-left-x').on("click", function() {
                _viewImage.controls.rotateLeft();
            })
            $('#reset-position').on("click", function() {
                _viewImage.controls.reset(true);
            })

       

        },
        /**
         * @description Method to load the image handler.
         * @method imageLoadHandler
         */
        imageLoadHandler: function () {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflowJS.object.imageLoadHandler');
                console.log(new Error().stack);
            }

            _mediaType = $( '#mediaType' ).val(); 
            
            if ( _mediaType == 'image' || _mediaType == 'pdf' ) {
            	goobiWorkflowJS.object.freeJSResources();
                let imageZoomPersistenzeId = $( '#persistenceId' ).val();
                if(imageZoomPersistenzeId && imageZoomPersistenzeId.length > 0) {
                    if(_debug)console.log("persist image zoom with id ", imageZoomPersistenzeId);
                    _configViewer.global.persistenceId = imageZoomPersistenzeId;
                    _configViewer.global.persistZoom =  true;
                    _configViewer.global.persistRotation = true;                    
                }
                var tileSource = $( '#tileSource' ).val();
                if( _debug ) {
                    console.log("loading tileSource:", tileSource)
                }
                _configViewer.image.tileSource = tileSource;
                _viewImage = new ImageView.Image(_configViewer);
                _viewImage.load().then( function () {
                    goobiWorkflowJS.layout.setObjectViewHeight();
                    goobiWorkflow.object.initControls();
                    goobiWorkflow.object.initAreas();
                    _viewImage.controls.goHome();
                    if (_viewImage.observables) {
                        _viewImage.observables.firstTileLoaded.subscribe(
                            () => {}, 
                            (error) => {
                                console.error( 'imageLoadHandler: Error loading image', error );
                                $( '#' + _configViewer.global.divId ).html( 'Failed to load image tile: ' + error.message );
                            }
                        )
                    }
                })
                .then( () => {
                    //precache next image
                    let tileSource = $("#tileSource_next").val();
                    let divId = "precacheNext";
                    if(tileSource) {                        
                        this.preCache(tileSource, divId);
                    }
                })
                .then( () => {
                    //precache previous image
                    let tileSource = $("#tileSource_previous").val();
                    let divId = "precachePrevious";
                    if(tileSource) {                        
                        this.preCache(tileSource, divId);
                    }
                })
                .catch( function ( error ) {
                    console.error( 'imageLoadHandler: Error opening image', error );
                    $( '#' + _configViewer.global.divId ).html( 'Failed to load image: ' + error.message );
                });
            }
            else if ( _mediaType == 'object' ) {
                $( '#imageLoader' ).show();
                goobiWorkflowJS.layout.setObjectViewHeight();
                _world = WorldGenerator.create(_worldConfig); 
                _world.loadObject( {
                    url: $( '#objectUrl' ).val(),
                    position: { x: 0, y: 0, z: 0 },
                    rotation: { x: 0, y: 0, z: 0 },
                    size: 10,
                    material: {
                        color: 0x44bb33
                    },
                    focus: true,
//                    onTick: function ( object, time ) {
//                        if ( object ) {
//                            object.rotation.set( 0, Math.PI / 180 * time, 0 );
//                        }
//                    }
                }).then( function ( object ) {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.info( 'imageLoadHandler: loaded', object );
                    _world.render();
                }).catch( function ( error ) {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.error( 'imageLoadHandler: failed to load: ', error );
                })
            } 
            else if ( _mediaType == 'x3dom' ) {
                var objectUrl = $( '#objectUrl' ).val();
                $( '#imageLoader' ).show();
                new X3DLoader().load( $( '#mainImage' ), objectUrl, function () {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.info( 'imageLoadHandler: loaded' );
                },
                function () {
                    console.info( 'imageLoadHandler: progress' );
                },
                function ( error ) {
                    $( '#imageLoader' ).fadeOut( 2000 );
                    console.info( 'imageLoadHandler: error', error );
                });
            }
        },
        /**
         * enable drawing a rect on the image by passing paramter draw = true; disable with draw = false
         */
        setDrawArea(draw, id) {
            this.drawArea = draw;
            this.areaId = id;
        },
        /**
         * Check if drawing an area is enabled
         */
        isDrawArea() {
            return this.drawArea;
        },
        
        /**
         * Initialize drawing and transforming areas within image
         */
        initAreas() {
        	if(_debug)console.log("init areas");
            $('#disable-interaction-overlay').hide();
            this.drawer = new ImageView.Draw(_viewImage.viewer, _drawStyle, () => this.isDrawArea());
            this.drawer.finishedDrawing().subscribe(function(overlay) {
            	console.log("finished drawing", this);
            	overlay.style = $.extend({}, _drawStyle, {borderColor: this.colors.next()});
                overlay.draw();
                this.addOverlay(overlay);
                this.setDrawArea(false);
                this.drawnOverlay = overlay;
                this.transformer.addOverlay(overlay);
                this.endDrawArea();
                this.addArea(overlay);
                if(this.areaTarget == "current") {
                	this.highlight(overlay);
                }
                $('#disable-interaction-overlay').hide();
            }.bind(this)); 
                        
            this.transformer = new ImageView.Transform(_viewImage.viewer, _drawStyle, () => !this.isDrawArea());
            this.transformer.finishedTransforming().subscribe(function(overlay) {
                this.setArea(overlay);
            }.bind(this));

			this.areaString = $("#pageareas").text();
			//console.log("page area string", this.areaString);
			if (this.areaString) {
				if(_debug)console.log("drawAreas", this.areaString);
	            let areas = JSON.parse(this.areaString);
	            this.drawnOverlay = undefined;
				this.drawAreas(areas);
			} else {
				this.drawAreas([]);
			}
			
			goobiWorkflow.jsfAjax.success.subscribe(data => {
				let areaString = $("#pageareas").text();
				if (this.areaString != areaString) {
					this.areaString = areaString;
					if(this.areaString) {
		            	let areas = JSON.parse(this.areaString);
		            	this.drawnOverlay = undefined;
		            	this.drawAreas(areas);
		            } else {
		            	this.drawAreas([]);
		            }
		        }
				//console.log("page area string", this.areaString);
			}); 
			this.initDeletePageAreas();
		},
		addOverlay(overlay) {
			if(overlay) {
				this.overlays.push(overlay);
				this.overlays.sort((o1,o2) => {
            		return o1.highlight ? -1 : o2.highlight ? 1 : 0;
           		} );
			}
		},
		startDrawArea(source, target) {
			console.log("start draw area", source, target);
			if(this.drawnOverlay && target == this.getAreaTarget()) {
				this.drawnOverlay.remove();
			}
			this.setDrawArea(true);
			this.setAreaTarget(target);
			$(source).hide();
			$(".cancel-area-edition").hide();
			$(source).next(".cancel-area-edition").show();
			$('#disable-interaction-overlay').show();
		},
		cancelDrawArea() {
			if(this.isDrawArea()) {
				this.setDrawArea(false);
				this.endDrawArea();
			} else {
				if(this.drawnOverlay) {
					this.drawnOverlay.remove();
				}
				this.endDrawArea();
				cancelPageAreaEdition();
			}
			$(".cancel-area-edition").hide();
		},
		endDrawArea() {
			$('#disable-interaction-overlay').hide();
			$(".start-area-edition").show();
		},
		/**
		Set to 'current' to add area to current docStrct. Otherwise area is added to the next newly created docStruct
		*/
		setAreaTarget(target) {
			this.areaTarget = target;
		},
		getAreaTarget() {
			return this.areaTarget;
		},
		addArea(overlay) {
			let area = this.writeArea(overlay);
			area.addTo = this.areaTarget;
			addPageArea(area);
			if(this.areaTarget == "current") {
				this.drawnOverlay = undefined;
				$(".cancel-area-edition").hide();
				$(".start-area-edition").show();
			}
		},
		setArea(overlay) {
			let area = this.writeArea(overlay);
			console.log("set area", overlay, area);
			setPageArea(area);
		},
		deleteArea(overlay) {
			deletePageArea({areaId: overlay.areaId});
		},
		cancelPageAreaEdition() {
			cancelPageAreaEdition();
		},
        initDeletePageAreas() {
	        if(_debug)console.log("init delete page areas");
	        this.endDeletePageMode();//remove previous ini
        	$(document).off("click", "[data-pagearea-delete='start']").on("click", "[data-pagearea-delete='start']", (e) => {
        		this.startDeletePageMode();
        	});
        	$(document).off("click", "[data-pagearea-delete='cancel']").on("click", "[data-pagearea-delete='cancel']", (e) => {
        		this.endDeletePageMode();
        	});
        },
        startDeletePageMode() {
        	if(_debug)console.log("start delete mode");
        	$("[data-pagearea-delete='start']").hide();
        	$("[data-pagearea-delete='cancel']").show();
        	if(this.deleteHandler == null) {
	        	this.deleteHandler = event => {
		        	if(_debug)console.log("delete area ", event, this.overlays);
		        	this.overlays.every(o => {
						if(o.contains(event.position, 5, true)) {
							if(_debug)console.log("delete page area 2", o);
							deletePageArea({"areaId": o.areaId});
							o.remove();
							this.transformer.removeOverlay(o);
							this.endDeletePageMode();
							return false;
						} else {
							return true;
						}
					});
		        };
	        }
        	
        	_viewImage.viewer.addHandler("canvas-click", this.deleteHandler);
        	
        },
        endDeletePageMode() {
        	if(_debug)console.log("end delete page mode");
    		$("[data-pagearea-delete='cancel']").hide();
    		$("[data-pagearea-delete='start']").show();
    		if(this.deleteHandler != null) {
	        	_viewImage.viewer.removeHandler("canvas-click", this.deleteHandler);
	        	this.deleteHandler = null;
    		}
        },
        drawAreas(areas) {
        	if(_debug)console.log("draw areas ", areas);
            if(this.overlays) {
            	this.overlays.forEach(o => {
            		o.remove();
            		this.transformer.removeOverlay(o);
            	});
            }
       		$("#pageAreaName").val("");
            this.overlays = [];
            this.colors = new ImageView.ColorIterator(_colors);
            
            var shouldDraw = false;
            for(var area of areas) {
                if(!area.x) {
                    shouldDraw = true;
                } else {
                    try {
	                    var rect = new OpenSeadragon.Rect(parseInt(area.x), parseInt(area.y), parseInt(area.w), parseInt(area.h));
	                    var displayRect = ImageView.CoordinateConversion.convertRectFromImageToOpenSeadragon(rect, _viewImage.viewer, _viewImage.getOriginalImageSize());
	                    var overlay = new ImageView.Overlay(displayRect, _viewImage.viewer, _drawStyle, true);
	                    overlay.style = $.extend({}, _drawStyle, {borderColor: this.colors.next()});
	                    overlay.areaId = area.areaId;
	                    if(area.highlight) {
	                    	this.highlight(overlay);
	                    }
	                    overlay.draw();
	                    if(_debug)console.log("draw overlay", overlay);
	                    this.transformer.addOverlay(overlay);
	                    this.addOverlay(overlay);
                    } catch(e) {
                    }
                }
                if(area.label && !area.logId) {
                	//new area. Update "Bildbereich" input
                	$("#pageAreaName").val(area.label);
                }
            } 
            if(shouldDraw) {
                $('#disable-interaction-overlay').show();
                this.setDrawArea(true, area.id);
            } else {
                this.setDrawArea(false, null);
            }
        },
        highlight(overlay) { 
        	overlay.highlight = true;
        	overlay.style.fillColor = overlay.style.borderColor;
        	overlay.style.opacity = 0.3;
        	_viewImage.viewer.forceRedraw();
        },
        unHighlight(overlay) {
        	overlay.highlight = false;
        	overlay.style.fillColor = null;
        	_viewImage.viewer.forceRedraw();
        }, 
        writeArea(overlay) {
            var area = {};
            var rect = ImageView.CoordinateConversion.convertRectFromOpenSeadragonToImage(overlay.rect, _viewImage.viewer, _viewImage.getOriginalImageSize());
            if(rect) {                    
                area.areaId = overlay.areaId;
                area.x = Math.round(rect.x);
                area.y = Math.round(rect.y);
                area.w = Math.round(rect.width);
                area.h = Math.round(rect.height);
            }
            return area;
        },
        /**
         * @description Method to clean up javascript resources for different object views.
         * @param {Object} data A data object.
         */
        freeJSResources: function( data ) {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflowJS.object.freeJSResources');
            }

            if ( !data || data.status == 'begin' ) {

                if ( _viewImage ) {
                    if ( _debug ) {
                        console.info( 'freeJSResources: closing OpenSeadragon viewer' );
                    }
                    _viewImage.close();
                }
                if ( _world ) {
                    if ( _debug ) {
                        console.info( 'freeJSResources: disposing 3d scene' );
                    }
                    _world.dispose();
                }
                if(_preloadedImages != []) {
                	if (_debug) {
                		console.info( 'freeJSResources: disposing preload');
                	}
                	for(var i in _preloadedImages){
                		_preloadedImages[i].close()
                	}
                	_preloadedImages = []
                	
                }

                return;
            }
        },
        
        preCache(url, id) {
        	if(!document.querySelector('#'+id)) {
	            let container = $("<div id='" + id + "' />")
	            
	            $("main").append(container);
        	}
            let viewConfig = {
                    global: {divId: id, imageControlsActive: false, tabIndex: -1},
                    image: {tileSource: url}
            }
            var preload = new ImageView.Image(viewConfig)
            preload.load()
            .catch( error => console.log("error precaching url " + url));
            _preloadedImages.push(preload)
            
        }
        
        
    };

    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {};
    
    goobiWorkflow.printpage = {
        /**
         * @description Method to initialize a print stylesheet.
         * @method init
         */
    	init: function( config ) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.printpage.init' );
            }
        },
        /**
         * @description Method to open the structure tree in a new window for print.
         * @method print
         */
        print: function(url) {
            if ( _debug ) {
                console.log('EXECUTE: goobiWorkflowJS.printpage.print');
                console.log( '--> url = ', url );
            }
            
            var printReport = document.getElementById('pageContentLeft').innerHTML;
            var link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = url + '/uii/template/css/intranda.css?version=1';
            
            var win = window.open("", "", "");
            var head = win.document.getElementsByTagName('head')[0];
            head.appendChild(link);
            win.document.body.innerHTML = printReport;
            
            win.window.print();
            win.close();
        }
    };
    

    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = (function (goobiWorkflow) {
    'use strict';

    var _debug = false;
    
    goobiWorkflow.progress = {
        /**
         * @description Method to initialize the progress bar module.
         * @method init
         */
        init: function (config) {
            if (_debug) {
                console.log('Initializing: goobiWorkflowJS.progress.init');
            }
        },
        /**
         * @description Method to show the progressbar panel.
         * @method displayProgressBar
         */
        displayProgressBar: function () {
            if (_debug) {
                console.log('EXECUTE: goobiWorkflowJS.progress.displayProgressBar');
            }
            
            var element = document.getElementById('progressPanel');

            if (element.style.display == 'block') {
                element.style.display = 'none';
            } 
            else {
                element.style.display = 'block';
            }
            
            document.getElementById('progressbutton').click();
        },
    };

    return goobiWorkflow;

})(goobiWorkflowJS || {}, jQuery);
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _positions = {
        selectPage: {
            label: 0
        },
        structure: {
            link: 0
        }
    };
    
    goobiWorkflow.scrollPositions = {
        /**
         * @description Method to initialize the box module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.scrollPositions.init' );
            }

            // get scroll status
            _getScrollStatus();

            // set scroll status
            _setScrollStatus();
        }
    };

    /**
     * @description Method to set the scroll status of the boxes.
     * @method _setScrollStatus
     */
    function _setScrollStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _setScrollStatus' );
        }

        // set scroll status of structure link
        $( 'body' ).on( 'click', '#meStructure button', function() {
            _positions.structure.link = $( this ).parents('tr').position().top;

            sessionStorage.setItem( 'wf_scrollPositions', JSON.stringify( _positions ) );
        } );
    }

    /**
     * @description Method to get the scroll status of the boxes.
     * @method _getScrollStatus
     */
    function _getScrollStatus() {
        if ( _debug ) {
            console.log( 'EXECUTE: _getScrollStatus' );
        }

        var structLinkPosition;
        
        if ( sessionStorage.getItem( 'wf_scrollPositions' ) == null ) {
            sessionStorage.setItem( 'wf_scrollPositions', JSON.stringify( _positions ) );
            structLinkPosition = JSON.parse( sessionStorage.getItem( 'wf_scrollPositions' ) );
            $( '#pageContentLeft' ).scrollTop( structLinkPosition.structure.link );
        }
        else {
            structLinkPosition = JSON.parse( sessionStorage.getItem( 'wf_scrollPositions' ) );
            $( '#pageContentLeft' ).scrollTop( structLinkPosition.structure.link );
        }
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _tabStatusDefault = {
        metseditorPagesOverview: true,
        metseditorPagesAllPages: false,
        metseditorPagesQuickassign: false
    };
    var _tabStatus = {};
    
    goobiWorkflow.structdata = {
        /**
         * @description Method to initialize the structdata module.
         * @method init
         */
    	init: function() {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.structdata.init' );
            }

            // check session storage for tab status
            if (sessionStorage.getItem('wf_structdataTabStatus') == null || sessionStorage.getItem('wf_structdataTabStatus') == undefined) {
                sessionStorage.setItem('wf_structdataTabStatus', JSON.stringify(_tabStatusDefault));
                _tabStatus = sessionStorage.getItem('wf_structdataTabStatus');
                
                // check page assignment tab status
                _getPageAssignmentTabStatus();
                _setPageAssignmentTabStatus();
            }
            else {
                _tabStatus = sessionStorage.getItem('wf_structdataTabStatus');
                
                // check page assignment tab status
                _getPageAssignmentTabStatus();
                _setPageAssignmentTabStatus();
            }
        },
    };

    /**
     * @description Method to check and get the page assignment tab status.
     * @method _getPageAssignmentTabStatus
     */
    function _getPageAssignmentTabStatus() {
        if (_debug) {
            console.log('EXECUTE: _getPageAssignmentTabStatus');
        }

        var status = JSON.parse(_tabStatus);
        
        $.each(status, function(index, value) {
            if (value) {
                $('#' + index).addClass('show');
            }
        });
    }

    /**
     * @description Method to check and set the page assignment tab status.
     * @method _setPageAssignmentTabStatus
     */
    function _setPageAssignmentTabStatus() {
        if (_debug) {
            console.log('EXECUTE: _setPageAssignmentTabStatus');
        }

        var status = JSON.parse(_tabStatus);
        
        $('body').on('click', '[data-target="#metseditorPagesOverview"], [data-target="#metseditorPagesAllPages"], [data-target="#metseditorPagesQuickassign"]', function() {
            var currentTarget = $(this).attr('aria-controls');
            
            $.each(status, function (index) {
                if (index == currentTarget) {
                    status[index] = true;
                }
                else {
                    status[index] = false;
                }
                sessionStorage.setItem('wf_structdataTabStatus', JSON.stringify(status));
            });
        });
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
		maxParallelRequests: 100
	};
    var _intrandaImages = {};
    
    goobiWorkflow.thumbnails = {
        /**
         * @description Method to initialize the thumbnail rendering.
         * @method init
         */
    	init: function(config) {
			if(config) {				
				this.config = $.extend( true, {}, _defaults, config );
			}
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.thumbnails.init', this.config);
            }

			var promises = [];
			var elements = [];
			var activeAdded = false;
            $( '.thumbnails__thumb-canvas' ).each( function( index, el ) {
				elements.push(el);
			});
			
			let elementGroups = groupArray(elements, this.config.maxParallelRequests);
			let activeObservable = new rxjs.Subject();
			let thumbnailLoadObservables = rxjs.from(elementGroups)
			.pipe(
                rxjs.operators.concatMap(thumbGroup => {
                    let groupObservables = rxjs.from(thumbGroup)
                    .pipe(
	                	rxjs.operators.mergeMap(ele => {
							let promise = drawOnCanvas( ele );
							activeObservable.next(promise);
							if(this.isActiveElement(ele)) {
								activeObservable.complete();
							}
							return promise;
						})
	                );
                    return rxjs.forkJoin(groupObservables);
                })
        	)
         	rxjs.forkJoin(thumbnailLoadObservables).subscribe();

            var rightContent = document.querySelector( '#pageContentRight' );
            if(rightContent.querySelector( '#thumbnails' )) {
            	rightContent.scrollTo(0,0);
            }
        	var activeThumbnail = document.querySelector('.thumbnails__thumb.active');
        	if(activeThumbnail) {
				let promises = [];
				activeObservable.subscribe({
					next: p => promises.push(p),
					error: p => promises.push(p),
					complete: () => {
			            Promise.all(promises).then( () => {
		            		activeThumbnail.scrollIntoView({block: "center"});
	           			}); 
					}
				});
        	}
        },
        isActiveElement: function(el) {
			return el.parentElement.parentElement.parentElement.classList.contains("active");
		},
    };
    
    /**
     * @description Method to set the active thumbnail when it gets selected
     */
    goobiWorkflow.updateSelectedThumbnail = function( element ) {
        var galleryLinks;
        galleryLinks = document.getElementsByClassName('thumbnails__thumb');
        for (var i = 0; i < galleryLinks.length; i++) {
            galleryLinks[i].className = "thumbnails__thumb";            
        }
        element.parentElement.parentElement.className = "thumbnails__thumb active";
        return true;
    }
    
    /**
     * @description Method to draw the thumbnail images on a canvas.
     * @method drawOnCanvas
     * @param {Object} canvas The canvas object to draw on.
     */
    function drawOnCanvas( canvas ) {
    	return new Promise( function(resolve, reject) {
	        setTimeout( function() {
	            if ( canvas == null ) {
	                return;
	            }
	            var ctx = canvas.getContext( '2d' );
	            var d = canvas.dataset;
	            
	            if ( !d ) {
	                // fix for ie not supporting element.dataset
	                d = {};
	                d.image_small = canvas.getAttribute( 'data-image_small' );
	                d.image_large = canvas.getAttribute( 'data-image_large' );
	            }
	            
	            var img = new Image();
	            img.onload = function() {
	                var scale = ( canvas.width * 2 ) / this.width;
	                canvas.width = this.width;
	                canvas.height = this.height;
	                ctx.drawImage( img, 0, 0, this.width, this.height );
	                _intrandaImages[ canvas.id ] = {
	                    smallWidth: this.width - 10,
	                    smallHeight: this.height - 10,
	                    largeUrl: d.image_large
	                };
	                resolve();
	            };
	            var image = d.image_small;
	            // console.log(image);
	            img.src = image;
	            canvas.addEventListener( 'mouseout', drawOnCanvasMouseOut, false );
	            canvas.addEventListener( 'mousemove', onMouseMove, false );
	        }, 100 );
	    });
    }

    /**
     * @description Method to trigger mouseout event.
     * @method drawOnCanvasMouseOut
     */
    function drawOnCanvasMouseOut( event ) {
        drawOnCanvas( event.currentTarget );
    }

    /**
     * @description Method to get the position of the mouse cursor.
     * @method getMousePos
     * @param {Object} canvas The canvas object to draw on.
     * @param {Object} event The ebvent object which contains the mouse positions.
     */
    function getMousePos( canvas, event ) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: event.clientX - rect.left - 5,
            y: event.clientY - rect.top - 5
        };
    }
    /**
     * @description Method to prevent to submit a form twice.
     * @method preventDoubleSubmit
     * @param {Object} event The click event which triggers submit.
     */
    function preventDoubleSubmit(event) {
        var prevent = function(event) {
           event.preventDefault();
        }
        var oldOnclick = event.onclick;
        event.onclick = prevent;
        setTimeout(function() {
            event.onclick = oldOnclick;
        }, 700);
    }

    /**
     * @description Method to watch the mouse move event on canvas.
     * @method onMouseMove
     * @param {Object} event The mouse move event to watch.
     */
    function onMouseMove( event ) {
        var canvas = event.currentTarget;
        var img = new Image();
        img.onload = function() {
            if ( _intrandaImages[ canvas.id ] == null ) {
                return;
            }
            _intrandaImages[ canvas.id ].scaleX = ( img.width - _intrandaImages[ canvas.id ].smallWidth ) / _intrandaImages[ canvas.id ].smallWidth;
            _intrandaImages[ canvas.id ].scaleY = ( img.height - _intrandaImages[ canvas.id ].smallHeight ) / _intrandaImages[ canvas.id ].smallHeight;
            var pos = getMousePos( canvas, event );
            // check if mouse is still hovering over canvas
            if ( $( '#' + canvas.id + ':hover' ).length == 0 ) {
                return;
            }
            var scaleX = _intrandaImages[ canvas.id ].scaleX;
            var scaleY = _intrandaImages[ canvas.id ].scaleY;
            var ctx = canvas.getContext( '2d' );
            ctx.fillStyle = 'white';
            ctx.fillRect( 0, 0, canvas.width, canvas.height );
            var posX = pos.x * scaleX;
            var posY = pos.y * scaleY;
            if ( posX < 0 ) {
                posX = 0;
            }
            if ( posY < 0 ) {
                posY = 0;
            }
            if ( img.width - posX < canvas.width ) {
                posX = img.width - canvas.width;
            }
            if ( img.height - posY < canvas.height ) {
                posY = img.height - canvas.height;
            }
            ctx.drawImage( img, -posX, -posY );
        }
        if ( _intrandaImages[ canvas.id ] ) {
            img.src = _intrandaImages[ canvas.id ].largeUrl;
        }
    }
    
    function groupArray(array, groupSize) {
        let allGroups = array.reduce((groups, item) => {
            if(groups[groups.length - 1].length < groupSize) {
                groups[groups.length -1].push(item);
            } else {
                groups.push([item]);
            }
            return groups;
        }, [[]]);
        return allGroups;
    }
    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
var goobiWorkflowJS = ( function( goobiWorkflow ) {
    'use strict';
    
    var _debug = false;
    var _defaults = {
        selector: '.textarea-html'
    };
    
   
    
    goobiWorkflow.tinymce = {
        /**
         * @description Method to initialize tinyMCE.
         * @method init
         */
    	init: function(config) {
            if ( _debug ) {
                console.log( 'Initializing: goobiWorkflowJS.tinymce.init' );
                console.log( '--> config = ', config );
            }

            $.extend( true, _defaults, config );

            this.extendedTinyMceConfig = {
                selector: _defaults.selector,
                extended_valid_elements: 'p',
                statusbar: true,
                height: 200,
                menu: {},
                plugins: [
                    'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',
                    'searchreplace wordcount visualblocks visualchars code insertdatetime media nonbreaking',
                    'save table contextmenu directionality emoticons template paste'],
                content_css: 'css/content.css',
                toolbar: 'undo redo | styleselect | bold italic underline strikethrough | bullist numlist | image table | fullscreen code',
                spellchecker_languages: 'English=en_US,German=de_DE_frami',
                //	spellchecker_rpc_url: 'spellchecker.php',
                spellchecker_callback: function (method, text, success, failure) {
                    tinymce.util.JSONRequest.sendRPC({
                        url: "template/js/plugins/tinymce/js/tinymce/plugins/spellchecker/spellchecker.php",
                        method: "spellcheck",
                        params: {
                            lang: this.getLanguage(),
                            words: text.match(this.getWordCharPattern())
                        },
                        success: function (result) {
                            success(result);
                        },
                        error: function (error, xhr) {
                            console.log(error, xhr);
                            failure("Spellcheck error:" + xhr.status);
                        }
                    });
                },
                style_formats: [
                    {
                        title: 'Headings', items: [
                            { title: 'Heading 1', format: 'h1' },
                            { title: 'Heading 2', format: 'h2' },
                            { title: 'Heading 3', format: 'h3' },
                            { title: 'Heading 4', format: 'h4' },
                            { title: 'Heading 5', format: 'h5' },
                            { title: 'Heading 6', format: 'h6' }
                        ]
                    },
                    {
                        title: 'Blocks', items: [
                            { title: 'Paragraph', format: 'p' },
                            { title: 'Blockquote', format: 'blockquote' },
                            { title: 'Div', format: 'div' },
                        ]
                    },
                ],
                init_instance_callback: function (editor) {
                    var readOnlyAttr = $("#" + editor.id.replace(":", "\\:")).attr(
                        "readonly");
                    if (readOnlyAttr === "readonly") {
                        editor.setMode("readonly");
                    }
                    try {
                        resizeReferenceFields();
                        $(editor.getWin()).bind('resize', function () {
                            resizeReferenceFields();
                        });
                    } catch (error) {
                    }
                },
                setup: function (editor) {
                    editor.on("blur", function (event, a, b) {
                        editor.save();
                        console.log("input id = ", editor.id.replace(/:/g, "\\:"));
                        $("#" + editor.id.replace(/:/g, "\\:")).trigger("change");
                    });
                    editor.on('change', function () {
                        tinymce.triggerSave();
                    });
                }

            };
            goobiWorkflow.tinymce.renderInputFields();
    	   },
            initTinyMce: function () {
                if(_debug)console.log("init tinymce", goobiWorkflow.tinymce.extendedTinyMceConfig);
                tinymce.init(goobiWorkflow.tinymce.extendedTinyMceConfig);
            },

            renderInputFields : function (ajaxData) {
                if (typeof tinyMCE !== 'undefined') {
                    if (ajaxData === undefined || ajaxData.status == "begin") {
                        
                        for (var edId in tinyMCE.editors) {
                            try {
                                tinyMCE.editors[edId].remove();
                                console.log("Removed editor " + edId);
                            } catch (error) {
                                console.log("Error occured during removing editors; ", error);
                            }
                        }
                    }
                    if (ajaxData === undefined || ajaxData.status == "success") {
                        goobiWorkflow.tinymce.initTinyMce(ajaxData);
                    }
                }
            }

     
    };

    
    return goobiWorkflow;
    
} )( goobiWorkflowJS || {}, jQuery );
//# sourceMappingURL=goobiWorkflowJS.min.js.map