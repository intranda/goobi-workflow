<!-- This is an updated legacy component used in the layoutwizzard. Use with caution.
 	 Do NOT include more than one instance of this component per view, as it would break
	 the JS for any instances after the first. -->
<ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:composite="http://xmlns.jcp.org/jsf/composite"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:jsf="http://xmlns.jcp.org/jsf"
	xmlns:intranda="http://xmlns.jcp.org/jsf/composite/composites">

	<composite:interface>
		<composite:attribute name="name" />
		<composite:attribute name="identifier" />
		<composite:attribute name="label" />
		<composite:attribute name="labelPopover" default="" />
		<composite:attribute name="field" />
		<composite:attribute name="help" />
		<composite:attribute name="lowerLimit" />
		<composite:attribute name="upperLimit" />
		<composite:attribute name="step" />
		<composite:attribute name="scale" />
		<composite:attribute name="suffix" />
		<composite:attribute name="prefix" />
		<composite:attribute name="fieldStyle" />
		<composite:attribute name="required" default="false" />
		<composite:attribute name="displayAsRequired" default="false" />
        <composite:attribute name="displayLabel" default="true" />
		<composite:attribute name="style" />
		<composite:attribute name="readonly" default="false" />
		<composite:attribute name="forceId" default="true" />
		<composite:attribute name="classLeft" default="col-12 col-md-3" />
		<composite:attribute name="classRight" default="col-12 col-md-9" />
	</composite:interface>

	<composite:implementation>

		<!-- ROW -->
		<div class="row">

			<!-- LABEL -->
			<div class="#{cc.attrs.classLeft}" tabindex="-1">
				<intranda:formLabel label="#{cc.attrs.label}" labelFor="#{cc.attrs.name}"
					labelRequired="#{cc.attrs.required or cc.attrs.displayAsRequired}" rendered="#{cc.attrs.displayLabel}"/>
				<composite:insertChildren />
			</div>
			<!-- // LABEL -->

			<!-- CONTENT -->
			<div class="#{cc.attrs.classRight} input-option-slider #{cc.attrs.identifier}">
				<div class="d-flex flex-nowrap gap-2 w-100">
					<input
						class="form-range my-auto w-50"
						type="range"
						min="#{cc.attrs.lowerLimit}"
						max="#{cc.attrs.upperLimit}"
						step="#{cc.attrs.step}"
						data-slider-identifier="slider_#{cc.attrs.identifier}"
						oninput="sliderInputEvent(this)"
						value="#{cc.attrs.field}" />
					<span class="d-flex flex-nowrap gap-2 w-50">
						<span
							class="prefix my-auto w-25"
							jsf:rendered="#{cc.attrs.prefix.length() > 0}">
							#{cc.attrs.prefix}
						</span>
						<h:inputText
							forceId="#{cc.attrs.forceId}"
							styleClass="#{cc.attrs.fieldStyle} form-control my-auto#{
								cc.attrs.prefix.length() > 0 and cc.attrs.suffix.length() > 0 ? ' w-50' :
								cc.attrs.prefix.length() > 0 or cc.attrs.suffix.length() > 0 ? ' w-75' : ' w-100'
							}"
							value="#{cc.attrs.field}"
							pt:data-slider-identifier="slider_#{cc.attrs.identifier}"
							pt:oninput="textInputEvent(this)"
							required="#{cc.attrs.required}"
							readonly="#{cc.attrs.readonly}" />
						<span
							class="suffix my-auto w-25"
							jsf:rendered="#{cc.attrs.suffix.length() > 0}">
							#{cc.attrs.suffix}
						</span>
					</span>
				</div>
				<h:message
					for="#{cc.attrs.name}"
					showDetail="true"
					styleClass="help-inline font-danger" />
				<intranda:formHelp content="#{cc.attrs.help}" />
			</div>
		</div>
		<script type="text/javascript">

			function sliderInputEvent(sliderElement) {
				let textInput = document.querySelector( `.input-option-slider .form-control[data-slider-identifier="\${sliderElement.dataset.sliderIdentifier}"]` );
				textInput.value = sliderElement.value;
			}
			function textInputEvent(textElement) {
				let sliderInput = document.querySelector( `.input-option-slider .form-range[data-slider-identifier="\${textElement.dataset.sliderIdentifier}"]` );
				sliderInput.value = textElement.value;
			}
        </script>
	</composite:implementation>

</ui:composition>
